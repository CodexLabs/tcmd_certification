//UI Helpers
//----------

//simple helper to branch values based on OS
var osname = Ti.Platform.osname;
function os(androidValue,iosValue) {
	return (osname === 'android') ? androidValue : iosValue;
}
exports.os = os;

//Shared values for common use in view creation
var fontFamily = os('Droid Sans','Helvetica Neue');

//extend on object with the properties of one or more others (thanks, Dojo!)
//helper function, public interface below
var empty = {};
function mixin(target,source) {
	var name, s, i;
	for(name in source) {
		if (source.hasOwnProperty(name)) {
			s = source[name];
			if(!(name in target) || (target[name] !== s && (!(name in empty) || empty[name] !== s))) {
				target[name] = s;
			}
		}
	}
	return target; // Object
}

//public interface...
function extend(obj,props) {
	if(!obj) {
		obj = {};
	}
	for(var i=1, l=arguments.length; i<l; i++) {
		mixin(obj, arguments[i]);
	}
	return obj; // Object
}
exports.extend = extend;

//keystroke savings for view creation
function view(args) {
	return Ti.UI.createView(args);
}
exports.view = view;

//Return a Titanium label either with the passed text, or with the given i18n key
function label(text,args) {
	return Ti.UI.createLabel(extend({
		text:L(text,text),
		color:'#000',
		height:'auto',
		font: {
			fontFamily:fontFamily
		}
	},args||{}));
};
exports.label = label;

//return a window with a custom header
function createWin(title,args) {
	var win = Ti.UI.createWindow(extend({
		backgroundImage:'images/grain.png',
		navBarHidden:true, //hides the navigation bar on the window - also has the effect of associating a window with an activity
		orientationModes: [
			Ti.UI.LANDSCAPE_LEFT,
			Ti.UI.LANDSCAPE_RIGHT,
			Ti.UI.PORTRAIT,
			Ti.UI.UPSIDE_PORTRAIT
		]
	},args|| {}));
	
	var header = view({
		top:0,
		backgroundImage:'images/navbar.png',
		height:44
	});
	win.add(header);
	
	var headerTitle = label(title,{
		color:'#fff',
		textAlign:'center',
		font: {
			fontSize:18,
			fontWeight:'bold',
			fontFamily:fontFamily
		}
	})
	header.add(headerTitle);
	
	//create an API on this window to add views underneath our custom header
	var container = view({
		top:44,left:0,right:0,bottom:0
	});
	win.add(container);
	win.addChild = function(child) { container.add(child); };
	
	//create an API to set the title of our custom window
	win.updateTitle = function(title) {
		headerTitle.text = L(title,title);
	};
	
	return win;
};
exports.window = createWin;

//create an image view - save keystrokes
function img(args) {
	return Ti.UI.createImageView(args);
}
exports.img = img;

//Create a custom tab bar
function tabView(tabOne,tabTwo,options) {	
	var tabs = view(extend({
		height:49,
		backgroundImage:'images/tab_bg.png'
	},options||{}));
	
	//track tab index as state on this object
	tabs.tabIndex = 0;
	
	//use an inner function to create tabs in the bar
	function createTab(index,options) {
		var container = view({
			width:'50%',
			height:49
		});
		
		if (index === 0) {
			container.left = 0;
			container.backgroundImage = 'images/tab.png';
		} 
		else {
			container.right = 0;
		}
		
		var icon = img({
			image:options.on,
			height:'auto',
			width:'auto',
			top:5
		});
		container.add(icon);
		
		var title = label(options.name,{
			bottom:2,
			color:'#fff',
			width:'auto',
			font: {
				fontSize:10,
				fontFamily:fontFamily
			}
		});
		container.add(title);
		
		//fire the tab change event when one of the tabs is clicked
		container.addEventListener('click', function() {
			tabs.fireEvent('tabChange',{index:index});
			tabs.tabIndex = index;
		});
		
		//provide an API to toggle the necessary properties of a tab for (de)selection
		container.toggle = function(on) {
			icon.image = (on) ? options.on : options.off;
			container.backgroundImage = (on) ? 'images/tab.png' : '';
		};
		
		//hack - for android we need to re-set our percentage widths
		if (osname === 'android') {
			Ti.Gesture.addEventListener('orientationchange', function(e) {
				alert(e.orientation);
			});
		}
		return container;
	}
	
	var tab1 = createTab(0,tabOne);
	var tab2 = createTab(1,tabTwo);
	tabs.add(tab1);
	tabs.add(tab2);
	
	tabs.addEventListener('tabChange', function(e) {
		if (e.index === 0) {
			tab1.toggle(true);
			tab2.toggle(false);
		}
		else {
			tab1.toggle(false);
			tab2.toggle(true);
		}
	});

	return tabs;
}
exports.tabView = tabView;
